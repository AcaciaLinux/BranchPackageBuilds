name=rustc
version=1.60.0
source=https://static.rust-lang.org/dist/rustc-1.60.0-src.tar.xz
dependencies=[curl][cmake][libssh2][llvm]
description=The Rust programming language is designed to be a safe, concurrent, practical language. 
build={
	cd rustc-1.60.0-src

	mkdir /opt/rustc-1.60.0
	ln -svfn rustc-1.60.0 /opt/rustc

cat << EOF > config.toml
# see config.toml.example for more possible options
# See the 8.4 book for an example using shipped LLVM
# e.g. if not installing clang, or using a version before 10.0
[llvm]
# by default, rust will build for a myriad of architectures
targets = "X86"

# When using system llvm prefer shared libraries
link-shared = true

[build]
# omit docs to save time and space (default is to build them)
docs = false

# install cargo as well as rust
extended = true

[install]
prefix = "/opt/rustc-1.60.0"
docdir = "share/doc/rustc-1.60.0"

[rust]
channel = "stable"
rpath = false

# BLFS does not install the FileCheck executable from llvm,
# so disable codegen tests
codegen-tests = false

[target.x86_64-unknown-linux-gnu]
# NB the output of llvm-config (i.e. help options) may be
# dumped to the screen when config.toml is parsed.
llvm-config = "/usr/bin/llvm-config"

[target.i686-unknown-linux-gnu]
# NB the output of llvm-config (i.e. help options) may be
# dumped to the screen when config.toml is parsed.
llvm-config = "/usr/bin/llvm-config"


EOF

	export RUSTFLAGS="$RUSTFLAGS -C link-args=-lffi" &&
	python3 ./x.py build --exclude src/tools/miri
	
	python3 ./x.py test --verbose --no-fail-fast | tee rustc-testlog

	grep '^test result:' rustc-testlog | awk  '{ sum += $6 } END { print sum }'

	export LIBSSH2_SYS_USE_PKG_CONFIG=1
	DESTDIR=${PKG_INSTALL_DIR} python3 ./x.py install
	unset LIBSSH2_SYS_USE_PKG_CONFIG
}
